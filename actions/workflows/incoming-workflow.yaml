version: "2.0" # mistral version
name: umccr.incoming_wf
description: "Run the incoming pipeline, from runfolder detection to bcl2fastq conversion."


    # TODO: the workflow does not know of any state, multiple submission of the workflow for the same data is not handled properly
    # TODO: rsync excludes are hard coded in the workflow definition, but are used in different workflows (i.e. also for checksum). Perhaps there's a way to keep them in sync...
    # TODO: workflow now depends on Slack posts, perhaps we should change that so posts can't fail the workflow?
    # TODO: Discuss handling remote scripts from ST2 (perhaps via Ansible tasks or remote-shell-script runner)
    # TODO: discuss remote script provisioning; from ST2 instance vs on remote host(s)
    # TODO: discuss sync/async tasks
    # TODO: split mini workflows out into separate workflows? To be individually callable

workflows:

  arrival:
    type: direct
    input:
      - runfolder_name
      - out_dirs
      - destination

    tasks:
      # Start: notify users of a new runfolder
      post_arrival_start:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "New runfolder *{{ _.runfolder_name }}* ready."
        on-success:
          - samplesheet_check
          - post_samplesheet_check

      # Then check the SampleSheet.csv file whether we can directly use it for the bcl2fastq conversion
      post_samplesheet_check:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "Checking SampleSheet of *{{ _.runfolder_name }}*"

      samplesheet_check:
        action: umccr.samplesheet_check
        input:
          runfolder_name: "{{ _.runfolder_name }}"
        on-success:
          - bcl2fastq_start
          - post_check_success
        on-error:
          - post_check_failure
        # TODO: publish the number of created custom sample sheets (if applicable)

      post_check_success:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "SampleSheet check for runfolder *{{ _.runfolder_name }}* succeeded. Proceeding to bcl2fastq conversion."

      post_check_failure:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "ERROR: Sample sheet check for runfolder *{{ _.runfolder_name }}* failed. Automatic conversion not possible."
        on-complete:
          - fail

      # Next: submit the bcl2fastq conversion job
      # this job will detect if there are multiple sample sheets and will launch a conversion for each one
      # TODO: this logic should be here, not in the remote script! (probably requires to keep the state of the workflow in ST2)
      bcl2fastq_start:
        action: umccr.bcl2fastq_start
        input:
          runfolder_name: "{{ _.runfolder_name }}"
          extra_params: "--no-lane-splitting"
        on-success:
          - post_bcl2fastq_start_success
        on-error:
          - post_bcl2fastq_start_failure

      post_bcl2fastq_start_success:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "Runfolder *{{ _.runfolder_name }}* successfully submitted for conversion with bcl2fastq."

      post_bcl2fastq_start_failure:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "ERROR: Could not submit runfolder *{{ _.runfolder_name }}* for conversion."
        on-complete:
          - fail

      # Further steps will be triggered once the bcl2fastq conversion has finished


  checksum:
    type: direct
    input:
      - runfolder_name
      - out_dirs
      - destination
      - runfolder_base_path: "{{ st2kv.system.runfolder.base.path }}"
      - hpc_dest_base_path: "{{ st2kv.system.pipeline.data.base.path }}"

    tasks:
      # Notify of workflow start
      post_checksum_start:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "Creating checksums for *{{ _.runfolder_name }}* ..."
        on-success:
          - create_runfolder_checksums

      # create the checksums for raw runfolder data (except the documented exclusions)
      create_runfolder_checksums:
        action: umccr.runfolder_checksums
        input:
          runfolder_name: "{{ _.runfolder_name }}"
        on-success:
          - create_fastq_checksums
          - post_runfolder_checksum_success
        on-error:
          - post_runfolder_checksum_failure

      post_runfolder_checksum_success:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "Checksums for runfolder *{{ _.runfolder_name }}* successfully created! Creating checksums for FASTQs..."
        on-success:
          - post_bcl2bcl2fastq_output_path

      post_runfolder_checksum_failure:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "ERROR: Checksums for runfolder *{{ _.runfolder_name }}* failed!"
        on-complete:
          - fail

      post_bcl2bcl2fastq_output_path:
        action: chatops.post_message
        with-items: "msg in {{ _.out_dirs.split(',') }}"
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "bcl2fastq output directory: *{{ _.msg }}*"

      # create the checksums for the bcl2fastq output
      create_fastq_checksums:
        action: umccr.bcl2fastq_checksums
        with-items: "out_path in {{ _.out_dirs.split(',') }}"
        concurrency: 1
        input:
          runfolder_name: "{{ _.runfolder_name }}"
          bcl2fastq_output_path: "{{ _.out_path }}"
        on-success:
          - sync2s3_runfolder
          - post_fastq_checksum_success
        on-error:
          - post_fastq_failure

      post_fastq_checksum_success:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "Checksums for FASTQs of *{{ _.runfolder_name }}* successfully created! Starting data sync."

      post_fastq_failure:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "ERROR: Checksums for FASTQs of *{{ _.runfolder_name }}* failed!"
        on-complete:
          - fail


      sync2s3_runfolder:
        join: all
        action: umccr.sync2s3
        input:
          source_dir: "{{ _.runfolder_base_path }}/{{ _.runfolder_name }}"
          dest_dir: "{{ _.runfolder_name }}"
          excludes:
            - '/Data'
            - '/Thumbnail_Images'
        retry: # retry the command 3 times with 30sec delay in case of error, then fail
          count: 3
          delay: 30
        on-success:
          - sync2s3_bcl2fastq_output_prep
          - post_runfolder_sync2s3_success
        on-error:
          - post_runfolder_sync2s3_error

      post_runfolder_sync2s3_success:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "Runfolder *{{ _.runfolder_name }}* successfully synced to S3. Syncing bcl2fastq output..."

      post_runfolder_sync2s3_error:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "ERROR: Runfolder *{{ _.runfolder_name }}* S3 sync failed!"
        on-complete:
          - fail


      sync2s3_bcl2fastq_output_prep:
        action: core.local
        with-items: "out_path in {{ _.out_dirs.split(',') }}"
        input:
          cmd: "basename {{ _.out_path }}"
        publish:
            basenames: "<% task(sync2s3_bcl2fastq_output_prep).result.stdout %>"
        on-success:
          - sync2s3_bcl2fastq_output
        on-error:
          - fail


      sync2s3_bcl2fastq_output:
        join: all
        action: umccr.sync2s3
        with-items: 
          - "basename in {{ _.basenames }}"
          - "out_path in {{ _.out_dirs.split(',') }}"
        input:
          source_dir: "{{ _.out_path }}"
          dest_dir: "{{ _.runfolder_name }}/{{ _.basename }}" # TODO: basename jinja function does not exist!
          #dest_dir: "{{ _.runfolder_name }}/{{ _.out_path | basename }}" # TODO: basename jinja function does not exist!
          force_write: "yes, please"
        retry: # retry the command 3 times with 30sec delay in case of error, then fail
          count: 3
          delay: 30
        on-success:
          - rsync_runfolder
          - post_bcl2fastq_sync2s3_success
        on-error:
          - post_bcl2fastq_sync2s3_error

      post_bcl2fastq_sync2s3_success:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "bcl2fastq output for runfolder *{{ _.runfolder_name }}* successfully synced to S3."

      post_bcl2fastq_sync2s3_error:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "ERROR: Failed to S3 sync bcl2fastq output for runfolder *{{ _.runfolder_name }}*!"
        on-complete:
          - fail


      rsync_runfolder:
        action: umccr.rsync2hpc
        input:
          source_path: "{{ _.runfolder_base_path }}/{{ _.runfolder_name }}"
          dest_path: "{{ _.hpc_dest_base_path }}/Fastq/"
          excludes: "--exclude Data --exclude Thumbnail_Images"
        retry: # retry the command 3 times with 30sec delay in case of error, then fail
          count: 3
          delay: 30
        on-success:
          - rsync_bcl2fastq_output
          - post_runfolder_rsync_success
        on-error:
          - post_runfolder_rsync_error

      post_runfolder_rsync_success:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "Runfolder *{{ _.runfolder_name }}* successfully synced to HPC ({{ _.destination }}). Syncing bcl2fastq output..."

      post_runfolder_rsync_error:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "ERROR: Runfolder *{{ _.runfolder_name }}* sync failed!"
        on-complete:
          - fail

      rsync_bcl2fastq_output:
        action: umccr.rsync2hpc
        with-items: "out_path in {{ _.out_dirs.split(',') }}"
        concurrency: 1
        input:
          source_path: "{{ _.out_path }}"
          dest_path: "{{ _.hpc_dest_base_path }}/Fastq/{{ _.runfolder_name }}"
        retry: # retry the command 3 times with 30sec delay in case of error, then fail
          count: 3
          delay: 30
        on-success:
          - create_ready_link
          - post_bcl2fastq_rsync_success
        on-error:
          - post_bcl2fastq_rsync_error

      post_bcl2fastq_rsync_success:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "bcl2fastq output for runfolder *{{ _.runfolder_name }}* successfully synced to HPC ({{ _.destination }})."

      post_bcl2fastq_rsync_error:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "ERROR: Failed to rsync bcl2fastq output for runfolder *{{ _.runfolder_name }}*!"
        on-complete:
          - fail

      # create the symlink in the Ready folder as flag that the data in now in place and ready to be used
      create_ready_link:
        join: all
        action: umccr.ready_link
        input:
          runfolder_name: "{{ _.runfolder_name }}"
        on-success:
          - post_ready_link_success
          - update_group_spartan: "{{ _.destination == 'SPARTAN' }}"
        on-error:
          - post_ready_link_error

      post_ready_link_success:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "Runfolder *{{ _.runfolder_name }}* successfully flagged as _ready_ on {{ _.destination }}."

      post_ready_link_error:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "ERROR: Could not create symlink for *{{ _.runfolder_name }}* on {{ _.destination }}!"
        on-complete:
          - fail

      # change the linux group for the generated resources on Spartan
      update_group_spartan:
        action: umccr.chgrp
        input:
          files: 
            - "{{ _.hpc_dest_base_path }}/Fastq/{{ _.runfolder_name }}"
            - "{{ _.hpc_dest_base_path }}/Ready/{{ _.runfolder_name }}"
          group: "punim0010"
          recursive: "yes, please"
        on-success:
          - post_update_group_spartan_success
        on-error:
          - post_update_group_spartan_error


      post_update_group_spartan_success:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "Successfully changed user group of *{{ _.runfolder_name }}* to _punim0010_ on SPARTAN."

      post_update_group_spartan_error:
        action: chatops.post_message
        input:
          channel: "{{ st2kv.system.slack.channel }}"
          message: "ERROR changing user group of *{{ _.runfolder_name }}* to _punim0010_ on SPARTAN."
        on-complete:
          - fail
